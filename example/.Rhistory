geom_errorbar(aes(ymin=mu-ci, ymax=mu+ci), width=0.5, position=pd) +
geom_line(position=pd, width=2) +
geom_point(position=pd)+xlab("Block")+
ylab(expression(mu))+ggtitle("Mean Judgments")+
facet_wrap(~ judge, ncol = 1)+theme_bw()
print(judgments)
plotframe<-data.frame(mu=mu, ci=ci, Condition=mystring, time=time, judge=rep(c("Guilt", "Defend. Cred.", "Victim Cred."), each=40))
pd <- position_dodge(.1)
judgments<-ggplot(plotframe, aes(x=time, y=mu, col= Condition)) +
geom_errorbar(aes(ymin=mu-ci, ymax=mu+ci), width=0.5, position=pd) +
geom_line(position=pd, width=2) +
geom_point(position=pd)+xlab("Block")+
ylab(expression(mu))+ggtitle("Mean Judgments")+
facet_wrap(~ judge, ncol = 1)+theme_bw()
print(judgments)
rm(list=ls())
packages <- c('plyr', 'ggplot2', 'jsonlite', 'MASS', 'MCMCpack', 'plyr',
'rjags', 'fields', 'kernlab', 'nnet')
lapply(packages, require, character.only = TRUE)
#as.data.frame shortened
trans<-function(x){
y<-as.data.frame(x)
return(y)
}
xstring<-function(x){
y<-as.numeric(substr(x,1,1))
for (i in 2:4){
y<-cbind(y,as.numeric(substr(x,i,i)))
}
return(y)
}
myjson<-fromJSON("https://activettb.firebaseio.com/.json")
len<-length(myjson)
q=2
d<-myjson[[q]]
allcomps<-data.frame(xstring(d$alien1)-xstring(d$alien2),
xstring(d$alien1)-xstring(d$alien3),
xstring(d$alien1)-xstring(d$alien4),
xstring(d$alien2)-xstring(d$alien3),
xstring(d$alien2)-xstring(d$alien4),
xstring(d$alien3)-xstring(d$alien4))
combinations<-c(12,13, 14 ,23, 24, 34)
names(allcomps)<-rep(1:6, each=4)
chosencomp<-t(apply(d$alienchosen,1, function(x){x[order(x)]}))+1
allcomps$chosen<-rep(NA,30)
for (l in 1:30){
allcomps$chosen[l]<-which(paste0(chosencomp[,1],chosencomp[,2])[l]==paste(combinations))
}
allcomps$outcome<-ifelse(d$tracker1==chosencomp[,1],1,0)
head(alcomps)
alcomps
allcomps
head(allcomps)
allcomps$chosen[1]
allcomps$chosen[1]%in%names(allcomps)
names(allcomps)names(allcomps)%in%names(allcomps)
allcomps$chosen[1]%in%names(allcomps)
allcomps$chosen[1]==names(allcomps)
allcomps[1,allcomps$chosen[1]==names(allcomps)]
length(allcomps)
allcomps
nrow(allcomps)
paste0(allcomps[1,allcomps$chosen[1]==names(allcomps)])
as.caharcter(allcomps[1,allcomps$chosen[1]==names(allcomps)])
as.character(allcomps[1,allcomps$chosen[1]==names(allcomps)])
as.vector(allcomps[1,allcomps$chosen[1]==names(allcomps)])
paste(as.vector(allcomps[1,allcomps$chosen[1]==names(allcomps)]))
paste(as.vector(allcomps[1,allcomps$chosen[1]==names(allcomps)]))
t(allcomps[1,allcomps$chosen[1]==names(allcomps)]))
paste0(allcomps[1,allcomps$chosen[1]==names(allcomps)]), sep='')
paste0(allcomps[1,allcomps$chosen[1]==names(allcomps)], sep='')
paste0(allcomps[1,allcomps$chosen[1]==names(allcomps)], collapse='')
sort(paste0(allcomps[1,allcomps$chosen[1]==names(allcomps)], collapse=''))
sort(paste0(allcomps[1,allcomps$chosen[1]==names(allcomps)], collapse=''))
paste0(sort(allcomps[1,allcomps$chosen[1]==names(allcomps)], collapse=''))
paste0(sort(allcomps[1,allcomps$chosen[1]==names(allcomps)]), collapse='')
collcet<-c()
for (l in  1:nrow(allcomps) ){
c(collect,paste0(sort(allcomps[1,allcomps$chosen[1]==names(allcomps)]), collapse=''))
}
collect<-c()
for (l in  1:nrow(allcomps) ){
c(collect,paste0(sort(allcomps[1,allcomps$chosen[1]==names(allcomps)]), collapse=''))
}
collect
collect<-numeric()
for (l in  1:nrow(allcomps) ){
c(collect,paste0(sort(allcomps[1,allcomps$chosen[1]==names(allcomps)]), collapse=''))
}
collect
paste0(sort(allcomps[1,allcomps$chosen[1]==names(allcomps)]), collapse='')
paste0(sort(allcomps[1,allcomps$chosen[1]==names(allcomps)]), collapse='')
collect<-character()
for (l in  1:nrow(allcomps) ){
c(collect,paste0(sort(allcomps[1,allcomps$chosen[1]==names(allcomps)]), collapse=''))
}
collect
collect[l]<-paste0(sort(allcomps[1,allcomps$chosen[1]==names(allcomps)]), collapse=''))
collect<-1:30
for (l in  1:nrow(allcomps) ){
collect[l]<-paste0(sort(allcomps[1,allcomps$chosen[1]==names(allcomps)]), collapse=''))
}
paste0(sort(allcomps[1,allcomps$chosen[1]==names(allcomps)]), collapse=''))
paste0(sort(allcomps[1,allcomps$chosen[1]==names(allcomps)]), collapse=''))
collect<-1:30
for (l in  1:nrow(allcomps) ){
collect[l]<-paste0(sort(allcomps[1,allcomps$chosen[1]==names(allcomps)]), collapse='')
}
collect
collect<-1:30
for (l in  1:nrow(allcomps) ){
collect[l]<-paste0(sort(allcomps[l,allcomps$chosen[l]==names(allcomps)]), collapse='')
}
collect
dcollect<-data.frame(id=numeric(), chosen=numeric())
for (q in 1:len){
#Data Munging
d<-myjson[[q]]
allcomps<-data.frame(xstring(d$alien1)-xstring(d$alien2),
xstring(d$alien1)-xstring(d$alien3),
xstring(d$alien1)-xstring(d$alien4),
xstring(d$alien2)-xstring(d$alien3),
xstring(d$alien2)-xstring(d$alien4),
xstring(d$alien3)-xstring(d$alien4))
combinations<-c(12,13, 14 ,23, 24, 34)
names(allcomps)<-rep(1:6, each=4)
chosencomp<-t(apply(d$alienchosen,1, function(x){x[order(x)]}))+1
allcomps$chosen<-rep(NA,30)
for (l in 1:30){
allcomps$chosen[l]<-which(paste0(chosencomp[,1],chosencomp[,2])[l]==paste(combinations))
}
allcomps$outcome<-ifelse(d$tracker1==chosencomp[,1],1,0)
collect<-1:30
for (l in  1:nrow(allcomps) ){
collect[l]<-paste0(sort(allcomps[l,allcomps$chosen[l]==names(allcomps)]), collapse='')
}
dcollect$id<-rep(q, 30)
dcollect$chosen<-collect
}
d<-myjson[[q]]
allcomps<-data.frame(xstring(d$alien1)-xstring(d$alien2),
xstring(d$alien1)-xstring(d$alien3),
xstring(d$alien1)-xstring(d$alien4),
xstring(d$alien2)-xstring(d$alien3),
xstring(d$alien2)-xstring(d$alien4),
xstring(d$alien3)-xstring(d$alien4))
combinations<-c(12,13, 14 ,23, 24, 34)
names(allcomps)<-rep(1:6, each=4)
chosencomp<-t(apply(d$alienchosen,1, function(x){x[order(x)]}))+1
allcomps$chosen<-rep(NA,30)
for (l in 1:30){
allcomps$chosen[l]<-which(paste0(chosencomp[,1],chosencomp[,2])[l]==paste(combinations))
}
allcomps$outcome<-ifelse(d$tracker1==chosencomp[,1],1,0)
collect<-1:30
for (l in  1:nrow(allcomps) ){
collect[l]<-paste0(sort(allcomps[l,allcomps$chosen[l]==names(allcomps)]), collapse='')
}
dcollect$id<-rep(q, 30)
id<-rep(q, 30)
chosen<-collect
#################################################################
#Analysing Active Learning Data
#################################################################
#Preamble
rm(list=ls())
packages <- c('plyr', 'ggplot2', 'jsonlite', 'MASS', 'MCMCpack', 'plyr',
'rjags', 'fields', 'nnet')
lapply(packages, require, character.only = TRUE)
#################################################################
#as.data.frame shortened
trans<-function(x){
y<-as.data.frame(x)
return(y)
}
#Functions
xstring<-function(x){
y<-as.numeric(substr(x,1,1))
for (i in 2:4){
y<-cbind(y,as.numeric(substr(x,i,i)))
}
return(y)
}
##############THIS IS WHERE JAGS ENDS#####################
#Reading in JSON from Firebase
#################################################
myjson<-fromJSON("https://activettb.firebaseio.com/.json")
len<-length(myjson)
#################################################
dcollect<-data.frame(id=numeric(), chosen=numeric())
for (q in 1:len){
#Data Munging
d<-myjson[[q]]
allcomps<-data.frame(xstring(d$alien1)-xstring(d$alien2),
xstring(d$alien1)-xstring(d$alien3),
xstring(d$alien1)-xstring(d$alien4),
xstring(d$alien2)-xstring(d$alien3),
xstring(d$alien2)-xstring(d$alien4),
xstring(d$alien3)-xstring(d$alien4))
combinations<-c(12,13, 14 ,23, 24, 34)
names(allcomps)<-rep(1:6, each=4)
chosencomp<-t(apply(d$alienchosen,1, function(x){x[order(x)]}))+1
allcomps$chosen<-rep(NA,30)
for (l in 1:30){
allcomps$chosen[l]<-which(paste0(chosencomp[,1],chosencomp[,2])[l]==paste(combinations))
}
allcomps$outcome<-ifelse(d$tracker1==chosencomp[,1],1,0)
collect<-1:30
for (l in  1:nrow(allcomps) ){
collect[l]<-paste0(sort(allcomps[l,allcomps$chosen[l]==names(allcomps)]), collapse='')
}
if (q==1){
id<-rep(q, 30)
chosen<-collect
dat<-data.frame(id, chosen)
}
if(q>1){
id<-rep(q, 30)
chosen<-collect
d<-data.frame(id, chosen)
dat<-rbind(dat,d)
}
}
dat
unique(dat$chosen)
mapvalues
u,-unique(dat$chosen)
u<-unique(dat$chosen)
u
u<-paste(unique(dat$chosen))
u
mapvalues(dat$chosen,
from=unique(dat$chosen),
to=c("++00","+-00","++00","+++-", "+000", "++-0", "+000", "++-0", "+++0",
"+++0", "++--", "+++-", "++++", "++++"))
dat$combs<-mapvalues(dat$chosen,
from=unique(dat$chosen),
to=c("++00","+-00","++00","+++-", "+000", "++-0", "+000", "++-0", "+++0",
"+++0", "++--", "+++-", "++++", "++++"))
summary(dat$combs)
d<-summary(dat$combs)
d
d<-data.frame(summary(dat$combs))
d
names(d)<-c("combs", "counts")
names(d)
d<-summary(dat$combs)
d
d<-t(summary(dat$combs))
d
names(summary(dat$combs))
dplot<-data.frame(combs=names(summary(dat$combs)),
counts=summary(dat$combs))
dplot
dplot<-data.frame(combs=names(summary(dat$combs)),
counts=as.numeric(summary(dat$combs)))
dplot
barplot(dplot$counts)
dat$choice<-1
plot(dat$combs, dat$choice)
head(dat)
dat$choice
dat$choice<-1
ave(dat$choice, paste(dat$combs, dat$id), FUN=length)
dat$count<-ave(dat$choice, paste(dat$combs, dat$id), FUN=length)
plot(dat$combs, dat$count)
plot(dat$combs, dat$count, pch="", col="darkred")
plot(dat$combs, dat$count, pch="", col="darkred", main="Choices")
plot(dat$combs, dat$count, pch="", col="darkred",
main="Frequency of choices", xlab="Patterns", "Frequency")
plot(dat$combs, dat$count, pch="", col="darkred",
main="Frequency of choices", xlab="Patterns", ylab="Frequency")
plot(dat$combs/30, dat$count, pch="", col="darkred",
main="Frequency of choices", xlab="Patterns", ylab="Frequency")
plot(dat$combs, dat$count/30, pch="", col="darkred",
main="Frequency of choices", xlab="Patterns", ylab="Frequency")
fullcost<-510
totaldays<-12
neil<-4
paula<-4
phil<-4
tobi<-4
albert<-7
saoirse<-12
eric<-12
sum<-neil+paula+phil+tobi+albert+saoirse+eric
(neil/sum)*total
(neil/sum)*fullcost
(albert/sum)*fullcost
(neil/sum)*fullcost
(albert/sum)*fullcost
(saoirse/sum)*fullcost
print(neil/sum*fullcost)
(neil/sum*fullcost*4+albert/sum*fullcost+saoirse/sum*fullcost*2)==totalcost
(neil/sum*fullcost*4+albert/sum*fullcost+saoirse/sum*fullcost*2)==fullcost
combn(1:10, 3)
rnorm(1000, 158, 10)
round(rnorm(1000, 158, 10))
truehist(round(rnorm(1000, 158, 10)))
library(MASS)
truehist(round(rnorm(1000, 158, 10)))
hist(round(rnorm(1000, 158, 10)))
hist(round(rnorm(1000, 158, 10)), xlab=height)
hist(round(rnorm(1000, 158, 10)), xlab="height")
hist(round(rnorm(1000, 158, 10)), xlab="height", ylab='Counts')
?hist
y<-round(rnorm(1000, 158, 10))
y
hist(y, xlab="height", ylab='Counts')
m<-hist(y, xlab="height", ylab='Counts')
str(m)
m<-hist(y, xlab="height", ylab='Counts', n=10)
(m)
hist(y, xlab="height", ylab='Counts', n=10)
hist(y, xlab="height", ylab='Counts', nclass=10)
hist(y, xlab="height", ylab='Counts', breaks=10)
hist(y, xlab="height", ylab='Counts', breaks=10)
hist(y, xlab="height", ylab='Counts', breaks=1)
hist(y, xlab="height", ylab='Counts', breaks=5)
hist(y, xlab="height", ylab='Counts', breaks=8)
hist(y, xlab="height", ylab='Counts', breaks=8)
hist(y, xlab="height", ylab='Counts', breaks=8)
hist(y, xlab="height", ylab='Counts', breaks=10)
hist(y, xlab="height", ylab='Counts', breaks=8)
hist(y, xlab="height", ylab='Counts', breaks=9)
hist(y, xlab="height", ylab='Counts', breaks=9)
dev.off()
hist(y, xlab="height", ylab='Counts', breaks=9)
y<-rnorm(1000, 158, 10)
hist(y, xlab="height", ylab='Counts', breaks=9)
hist(y, xlab="height", ylab='Counts', breaks=10)
hist(y, xlab="height", ylab='Counts', breaks=11)
dev.off()
hist(y, xlab="height", ylab='Counts', breaks=11)
y<-rnorm(10000, 158, 10)
hist(y, xlab="height", ylab='Counts', breaks=11)
b<-seq(min(y),max(y),l=11)
hist(y, xlab="height", ylab='Counts', breaks=b)
y<-rnorm(1000, 158, 10)
b<-seq(min(y),max(y),l=11)
hist(y, xlab="height", ylab='Counts', breaks=b)
hist(y, xlab="height", ylab='Frequency', breaks=b)
h<-hist(y, xlab="height", ylab='Frequency', breaks=b)
dev.off()
print(h)
(h)
h
plot(h)
hist(y, xlab="height", ylab='Frequency', breaks=b)
h<-hist(y, xlab="height", ylab='Frequency', breaks=b)
plot(h)
plot(h, y="height")
plot(h, ylab="height")
h<-hist(y, xlab="", ylab="", breaks=b)
h<-hist(y, xlab="", ylab="", breaks=b)
dev.off()
plot(h, ylab="height")
plot(h, ylab="Frequency", xlab="Height")
plot(h, ylab="Frequency", xlab="Height", main="Frequency")
h
hp<-h
combn(1:10,1)
combn(1:10,2)
combs<-combn(1:10,2)
b<-seq(min(y),max(y),l=12)
h<-hist(y, xlab="", ylab="", breaks=b, main="")
plot(h, ylab="Frequency", xlab="Height", main="Frequency")
plot(h, ylab="Frequency", xlab="Height", main="Frequency Plot")
combs<-combn(1:11,2)
hp$counts<-0
plot(hp, ylab="Frequency", xlab="Height", main="Frequency Plot")
plot(h, ylab="Frequency", xlab="Height", main="Frequency Plot")
hp<-h
hp$counts
plot(h, ylab="Frequency", xlab="Height", main="Frequency Plot", ylim=c(0,max(h$counts)))
y<-rnorm(1000, 158, 10)
b<-seq(min(y),max(y),l=12)
h<-hist(y, xlab="", ylab="", breaks=b, main="")
plot(h, ylab="Frequency", xlab="Height", main="Frequency Plot", ylim=c(0,max(h$counts)))
hp<-h
hp$counts<-0
plot(hp, ylab="Frequency", xlab="Height", main="Frequency Plot", ylim=c(0,max(h$counts)))
hp<-h
combs<-combn(1:11,2)
combs
hp$counts<-0
plot(hp, ylab="Frequency", xlab="Height", main="Frequency Plot", ylim=c(0,max(h$counts)))
hp$counts[combs[,1]]<-h$counts[combs[,1]]
plot(hp, ylab="Frequency", xlab="Height", main="Frequency Plot", ylim=c(0,max(h$counts)))
hp$counts
hp<-h
hp$counts[combs[,1]]<-h$counts[combs[,1]]
plot(hp, ylab="Frequency", xlab="Height", main="Frequency Plot", ylim=c(0,max(h$counts)))
hp$counts<-0
hp
hp$counts<-rep(0,11)
hp$counts[combs[,1]]<-h$counts[combs[,1]]
plot(hp, ylab="Frequency", xlab="Height", main="Frequency Plot", ylim=c(0,max(h$counts)))
combs
ncol(combs)
combs<-combn(1:11,2)
for (i in 1:ncol(combs)){
hp$counts<-rep(0,11)
hp$counts[combs[,i]]<-h$counts[combs[,i]]
plot(hp, ylab="Frequency", xlab="Height", main="Frequency Plot", ylim=c(0,max(h$counts)))
Sys.sleep(0.5)
}
plot(hp, ylab="Frequency", xlab="Height", main="Frequency Plot", ylim=c(0,max(h$counts)), col="tomato")
paste(rep(0,11))
paste0(rep(0,11))
paste0(rep(0,11), collapse = ", ")
paste0(rep(0,11), collapse = "")
name<-paste0(rep(0,11), collapse = "")
name[1]
pname<-rep(0,11)
pname[combs[,i]]<-1
pname
name<-paste0(pname, collapse = "")
name
name<-paste0(pname, ".png", collapse = "")
name
name<-paste0(paste0(pname, collapse = ""), ".png")
name
getwd()
getwd()
y<-rnorm(1000, 169, 10)
b<-seq(min(y),max(y),l=12)
h<-hist(y, xlab="", ylab="", breaks=b, main="")
plot(hp, ylab="Frequency", xlab="Height in cm", main="Frequency Plot", ylim=c(0,max(h$counts)), col="tomato")
getwd()
dir.create("height")
setwd("height")
for (j in 1:5){
combs<-combn(1:11,j)
for (i in 1:ncol(combs)){
hp$counts<-rep(0,11)
hp$counts[combs[,i]]<-h$counts[combs[,i]]
pname<-rep(0,11)
pname[combs[,i]]<-1
name<-paste0(paste0(pname, collapse = ""), ".png")
png(name)
plot(hp, ylab="Frequency", xlab="Height in cm", main="Frequency Plot", ylim=c(0,max(h$counts)), col="tomato")
dev.off()
}
}
getwd()
for (j in 1:5){
combs<-combn(1:11,j)
for (i in 1:ncol(combs)){
hp$counts<-rep(0,11)
hp$counts[combs[,i]]<-h$counts[combs[,i]]
pname<-rep(0,11)
pname[combs[,i]]<-1
name<-paste0(paste0(pname, collapse = ""), ".png")
png(name)
plot(hp, ylab="", xlab="Height in cm", main="Frequency Plot", ylim=c(0,max(h$counts)), col="tomato")
dev.off()
}
}
for (j in 1:5){
combs<-combn(1:11,j)
for (i in 1:ncol(combs)){
hp$counts<-rep(0,11)
hp$counts[combs[,i]]<-h$counts[combs[,i]]
pname<-rep(0,11)
pname[combs[,i]]<-1
name<-paste0("h", paste0(pname, collapse = ""), ".png")
png(name)
plot(hp, ylab="", xlab="Height in cm", main="Frequency Plot", ylim=c(0,max(h$counts)), col="tomato")
dev.off()
}
}
name
plot(hp, ylab="", xlab="Height in cm", main="Frequency Plot", ylim=c(0,max(h$counts)), col="tomato")
hp$counts<-rep(0,11)
plot(hp, ylab="", xlab="Height in cm", main="Frequency Plot", ylim=c(0,max(h$counts)), col="tomato")
png("h00000000000.png")
plot(hp, ylab="", xlab="Height in cm", main="Frequency Plot", ylim=c(0,max(h$counts)), col="tomato")
dev.off()
setwd('/home/hanshalbe/Desktop/BayesQuad')
dir.create("example")
setwd("example")
for (j in 1:5){
combs<-combn(1:11,j)
for (i in 1:ncol(combs)){
hp$counts<-rep(0,11)
hp$counts[combs[,i]]<-h$counts[combs[,i]]
pname<-rep(0,11)
pname[combs[,i]]<-1
name<-paste0("h", paste0(pname, collapse = ""), ".png")
png(name)
plot(hp, ylab="", xlab="Height in cm", main="Frequency Plot", ylim=c(0,max(h$counts)), col="tomato")
dev.off()
}
}
hp$counts<-rep(0,11)
png("h00000000000.png")
plot(hp, ylab="", xlab="Height in cm", main="Frequency Plot", ylim=c(0,max(h$counts)), col="tomato")
dev.off()
b
round(b)
200-129
200-139
61/11
200-140
61/11
60/11
201-142
60/11
(201-142)/11
(190-130)/11
hp
